# Connect via ssh to the Instance, then configure AWS CLI with access details (Lab details given for example)
0.1. (enable permmision to the key) chmod 400 key-name.pem
0.2. (Connect) ssh -i key-name.pem ec2-user@instance-ip

# Set AWS CLI
1. aws configure
2. AWS Access Key ID [None]: AKIAXEABRA2NSKRYGGM4
3. AWS Secret Access Key [None]: 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
4. Default region name [None]: us-west-2
5. Default output format [None]: json

# Create instance via AWS CLI using create-lamp script (it had error and need to fix it with troubleshooting)
1. cd ~/sysops-activity-files/starters
2. cp create-lamp-instance-v2.sh create-lamp-instance.backup
3. vi create-lamp-instance-v2.sh

## Content file: create-lamp-instance-v2.sh
--iam-instance-profile Name=LabInstanceProfile \
--profile $profile \
--user-data file://create-lamp-instance-userdata-v2.txt )

#if the create instance command failed, exit this script
if [[ "$?" -ne "0" ]]; then
  exit 1
fi

echo
echo "Instance Details...."
echo $instanceDetails | python -m json.tool

# Extract instanceId
instanceId=$(echo $instanceDetails | python -m json.tool | grep InstanceId | sed -n 1p | cut -d '"' -f4)
echo "instanceId="$instanceId
echo
echo "Waiting for a public IP for the new instance..."
pubIp=""
while [[ "$pubIp" == "" ]]; do
  sleep 10;
  pubIp=$(aws ec2 describe-instances --instance-id $instanceId --region $region --profile $profile | grep PublicIp | sed -n 1p | cut -d '"' -f4)
done

echo
echo "The public IP of your LAMP instance is: "$pubIp
echo
echo "Download the Key Pair from the Vocareum page."
echo
echo "Then connect using this command (with .pem or .ppk added to the end of the keypair name):"
echo "ssh -i path-to/"$key" ec2-user@"$pubIp
echo
echo "The website should also become available at"
echo "http://"$pubIp"/cafe/"

echo
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo
echo "Done running create-instance.sh at "$DATE
echo
## end of file create-lamp-instance-v2.sh

## script Analyze:
Line 1:

This file is a bash file, so the first line contains #!/bin/bash
Lines 7–11:

The instance size is set to t3.small, which should be large enough to run the database and web server.
Lines 16–29:

The script invokes the AWS CLI describe-regions command to get a list of all AWS regions. In each region, it queries for an existing VPC that has the name Cafe VPC. When it finds it, it captures the vpc ID and region where the Café LAMP instance should be deployed and breaks out of the while loop.
Lines 31–57:

The script invokes AWS CLI commands to look up the Subnet ID, Keypair name, and AMI ID values that will be needed to create an EC2 instance.
Notice on line 32 that the line ends with a backslash (\ ) character. This character can be used to wrap a single command on to another line in the script file. You will find that this technique is used many times in this script to make it easier to read.
Lines 59–124:

This part of the script cleans up the AWS account for situations where this script already ran on your AWS account, and it is now being run again. The script checks if an instance named cafeserver already exists, and if a security group that includes cafeSG in its name already exists. If either resource is found, the script prompts you to delete them.
Lines 126–154:

The script creates a new security group with ports 22 and 80 open.
Lines 156–168:

The script creates a new EC2 instance.
Notice how the values set in lines 8 and 10 and the values collected in lines 16–57 are used in this AWS CLI call.
Also, notice the reference to a user-data script.
NOTE: You will be prompted to look at the details of the user-data file in a moment.

While you are still in the bash script, look again at lines 157–168:

The entire call to create the instance is captured in a variable that is named instanceDetails. The contents of this variable are then echoed out to the terminal on line 177, and they are formatted for easier viewing by using a Python JavaScript Object Notation (JSON) tool.
Lines 179–188:

The instanceId is parsed out of the instanceDetails, and then a while loop checks every 10 seconds to see if a public IP address has been assigned to the instance. When the check succeeds, the public IP address is written to the terminal.

## End of Analyze
