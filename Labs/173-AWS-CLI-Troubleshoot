# Connect via ssh to the Instance, then configure AWS CLI with access details (Lab details given for example)
0.1. (enable permmision to the key) chmod 400 key-name.pem
0.2. (Connect) ssh -i key-name.pem ec2-user@instance-ip

# Set AWS CLI
1. aws configure
2. AWS Access Key ID [None]: AKIAXEABRA2NSKRYGGM4
3. AWS Secret Access Key [None]: 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
4. Default region name [None]: us-west-2
5. Default output format [None]: json

# Create instance via AWS CLI using create-lamp script (it had error and need to fix it with troubleshooting)
1. cd ~/sysops-activity-files/starters
2. cp create-lamp-instance-v2.sh create-lamp-instance.backup
3. vi create-lamp-instance-v2.sh

##### Content file before fix: create-lamp-instance-v2.sh #######
--iam-instance-profile Name=LabInstanceProfile \
--profile $profile \
--user-data file://create-lamp-instance-userdata-v2.txt )

#if the create instance command failed, exit this script
if [[ "$?" -ne "0" ]]; then
  exit 1
fi

echo
echo "Instance Details...."
echo $instanceDetails | python -m json.tool

# Extract instanceId
instanceId=$(echo $instanceDetails | python -m json.tool | grep InstanceId | sed -n 1p | cut -d '"' -f4)
echo "instanceId="$instanceId
echo
echo "Waiting for a public IP for the new instance..."
pubIp=""
while [[ "$pubIp" == "" ]]; do
  sleep 10;
  pubIp=$(aws ec2 describe-instances --instance-id $instanceId --region $region --profile $profile | grep PublicIp | sed -n 1p | cut -d '"' -f4)
done

echo
echo "The public IP of your LAMP instance is: "$pubIp
echo
echo "Download the Key Pair from the Vocareum page."
echo
echo "Then connect using this command (with .pem or .ppk added to the end of the keypair name):"
echo "ssh -i path-to/"$key" ec2-user@"$pubIp
echo
echo "The website should also become available at"
echo "http://"$pubIp"/cafe/"

echo
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo
echo "Done running create-instance.sh at "$DATE
echo
## end of file create-lamp-instance-v2.sh

## script Analyze:
Line 1:

This file is a bash file, so the first line contains #!/bin/bash
Lines 7–11:

The instance size is set to t3.small, which should be large enough to run the database and web server.
Lines 16–29:

The script invokes the AWS CLI describe-regions command to get a list of all AWS regions. In each region, it queries for an existing VPC that has the name Cafe VPC. When it finds it, it captures the vpc ID and region where the Café LAMP instance should be deployed and breaks out of the while loop.
Lines 31–57:

The script invokes AWS CLI commands to look up the Subnet ID, Keypair name, and AMI ID values that will be needed to create an EC2 instance.
Notice on line 32 that the line ends with a backslash (\ ) character. This character can be used to wrap a single command on to another line in the script file. You will find that this technique is used many times in this script to make it easier to read.
Lines 59–124:

This part of the script cleans up the AWS account for situations where this script already ran on your AWS account, and it is now being run again. The script checks if an instance named cafeserver already exists, and if a security group that includes cafeSG in its name already exists. If either resource is found, the script prompts you to delete them.
Lines 126–154:

The script creates a new security group with ports 22 and 80 open.
Lines 156–168:

The script creates a new EC2 instance.
Notice how the values set in lines 8 and 10 and the values collected in lines 16–57 are used in this AWS CLI call.
Also, notice the reference to a user-data script.
NOTE: You will be prompted to look at the details of the user-data file in a moment.

While you are still in the bash script, look again at lines 157–168:

The entire call to create the instance is captured in a variable that is named instanceDetails. The contents of this variable are then echoed out to the terminal on line 177, and they are formatted for easier viewing by using a Python JavaScript Object Notation (JSON) tool.
Lines 179–188:

The instanceId is parsed out of the instanceDetails, and then a while loop checks every 10 seconds to see if a public IP address has been assigned to the instance. When the check succeeds, the public IP address is written to the terminal.

########### End of Analyze #########

# Try to run the script: ./create-lamp-instance-v2.sh after each fix | if it asked if you want to delete SG? chose yes.

# First Error, output:  "An error occurred (InvalidAMIID.NotFound) when calling the RunInstances operation: The image id '[ami-xxxxxxxxxx]' does not exist"
#First Answer: the region is hardcodded in the script, replace him with var @region

# Second Issue: Key-pair is not writen in run-instance
# Answer: add to the command: --key-name $key

# Third Issue: Port is not right in aws ec2 authorize-security-group-ingress
# Answer: change port 8080 to 80


## The script after all 3 fixes and after validaing it's working:
[ec2-user@cli-host starters]$ cat create-lamp-instance-v2.sh 
#!/bin/bash
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo
echo "Running create-instance.sh on "$DATE
echo

# Hard coded values
instanceType="t3.small"
echo "Instance Type: "$instanceType
profile="default"
echo "Profile: "$profile

echo
echo "Looking up account values..."

# get vpcId
vpc=""
while [[ "$vpc" == "" ]] ; do
  for i in $(aws ec2 describe-regions | grep RegionName | cut -d '"' -f4) ; do
    region=$i;
    vpc=$(aws ec2 describe-vpcs --region $i --filters "Name=tag:Name,Values='Cafe VPC'" --profile $profile | grep VpcId | cut -d '"' -f4 | sed -n 1p );
    if [[ "$vpc" != "" ]]; then
    	break;
    fi
  done
done
echo
echo "VPC: "$vpc
echo "Region: "$region

vpc=$(aws ec2 describe-vpcs \
--filters "Name=tag:Name,Values='Cafe VPC'" \
--region $region \
--profile $profile | grep VpcId | cut -d '"' -f4 | sed -n 1p)
echo "VPC: "$vpc

# get subnetId
subnetId=$(aws ec2 describe-subnets \
--filters "Name=tag:Name,Values='Cafe Public Subnet 1'" \
--region $region \
--profile $profile \
--query "Subnets[*]" | grep SubnetId | cut -d '"' -f4 | sed -n 1p)
echo "Subnet Id: "$subnetId

# Get keypair name
key=$(aws ec2 describe-key-pairs \
--profile $profile --region $region | grep KeyName | cut -d '"' -f4 )
echo "Key: "$key

# Get AMI ID
imageId=$(aws ec2 describe-images \
--owners amazon --query 'Images[*].[ImageId]' \
--filters 'Name=name,Values=amzn2-ami-hvm-2.0.20190115-x86_64-gp2' 'Name=state,Values=available' \
--output json \
--profile $profile \
--region $region | grep ami- | cut -d '"' -f2 | sed -n 1p)
echo "AMI ID: "$imageId

#check for existing cafe instance
existingEc2Instance=$(aws ec2 describe-instances \
--region $region \
--profile $profile \
--filters "Name=tag:Name,Values=cafeserver" "Name=instance-state-name,Values=running" \
| grep InstanceId | cut -d '"' -f4)
if [[ "$existingEc2Instance" != "" ]]; then
  echo
  echo "WARNING: Found existing running EC2 instance with instance ID "$existingEc2Instance"."
  echo "This script will not succeed if it already exists. "
  echo "Would you like to delete it? [Y/N]"
  echo ">>"

  validResp=0
  while [ $validResp -eq 0 ];
  do
      read answer
      if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
          echo
          echo "Deleting the existing instance..."
          aws ec2 terminate-instances --instance-ids $existingEc2Instance --region $region --profile $profile
          #wait for confirmation it was terminated
          aws ec2 wait instance-terminated --instance-ids $existingEc2Instance --region $region --profile $profile
          validResp="1"
      elif [[ "$answer" == "N" || "$answer" == "n" ]]; then
          echo "Ok, exiting."
          exit 1
      else
          echo "Please reply with Y or N."
      fi
  done

  sleep 10 #give it 10 seconds before trying to delete the SG this instance used.
fi

#check for existing cafeSG security Group
existingMpSg=$(aws ec2 describe-security-groups \
--region $region \
--query "SecurityGroups[?contains(GroupName, 'cafeSG')]" \
--profile $profile | grep GroupId | cut -d '"' -f4)

if [[ "$existingMpSg" != "" ]]; then
  echo
  echo "WARNING: Found existing security group with name "$existingMpSg"."
  echo "This script will not succeed if it already exists. "
  echo "Would you like to delete it? [Y/N]"
  echo ">>"

  validResp=0
  while [ $validResp -eq 0 ];
  do
      read answer
      if [[ "$answer" == "Y" || "$answer" == "y" ]]; then
          echo
          echo "Deleting the existing security group..."
          aws ec2 delete-security-group --group-id $existingMpSg --region $region --profile $profile
          validResp="1"
      elif [[ "$answer" == "N" || "$answer" == "n" ]]; then
          echo "Ok, exiting."
          exit 1
      else
          echo "Please reply with Y or N."
      fi
  done
  sleep 10 #give it 10 seconds before trying to recreate the SG
fi

# CREATE a security group and capture the name of it
echo
echo "Creating a new security group..."
securityGroup=$(aws ec2 create-security-group --group-name "cafeSG" \
--description "cafeSG" \
--region $region \
--group-name "cafeSG" \
--vpc-id $vpc --profile $profile | grep GroupId | cut -d '"' -f4 )
echo "Security Group: "$securityGroup

# Open ports in the security group
echo
echo "Opening port 22 in the new security group"
aws ec2 authorize-security-group-ingress \
--group-id $securityGroup \
--protocol tcp \
--port 22 \
--cidr 0.0.0.0/0 \
--region $region \
--profile $profile

echo "Opening port 80 in the new security group"
aws ec2 authorize-security-group-ingress \
--group-id $securityGroup \
--protocol tcp \
--port 80 \
--cidr 0.0.0.0/0 \
--region $region \
--profile $profile

echo
echo "Creating an EC2 instance in "$region
instanceDetails=$(aws ec2 run-instances \
--image-id $imageId \
--count 1 \
--instance-type $instanceType \
--region $region \
--subnet-id $subnetId \
--security-group-ids $securityGroup \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=cafeserver}]' \
--associate-public-ip-address \
--iam-instance-profile Name=LabInstanceProfile \
--profile $profile \
--key-name $key \
--user-data file://create-lamp-instance-userdata-v2.txt )

#if the create instance command failed, exit this script
if [[ "$?" -ne "0" ]]; then
  exit 1
fi

echo
echo "Instance Details...."
echo $instanceDetails | python -m json.tool

# Extract instanceId
instanceId=$(echo $instanceDetails | python -m json.tool | grep InstanceId | sed -n 1p | cut -d '"' -f4)
echo "instanceId="$instanceId
echo
echo "Waiting for a public IP for the new instance..."
pubIp=""
while [[ "$pubIp" == "" ]]; do
  sleep 10;
  pubIp=$(aws ec2 describe-instances --instance-id $instanceId --region $region --profile $profile | grep PublicIp | sed -n 1p | cut -d '"' -f4)
done

echo
echo "The public IP of your LAMP instance is: "$pubIp
echo
echo "Download the Key Pair from the Vocareum page."
echo
echo "Then connect using this command (with .pem or .ppk added to the end of the keypair name):"
echo "ssh -i path-to/"$key" ec2-user@"$pubIp
echo
echo "The website should also become available at"
echo "http://"$pubIp"/cafe/"

echo
DATE=`date '+%Y-%m-%d %H:%M:%S'`
echo
echo "Done running create-instance.sh at "$DATE
echo



## The output after running the fixed script:
[ec2-user@cli-host starters]$ ./create-lamp-instance-v2.sh 

Running create-instance.sh on 2022-05-11 09:59:16

Instance Type: t3.small
Profile: default

Looking up account values...

VPC: vpc-06ebde35b2fa655e8
Region: us-west-2
VPC: vpc-06ebde35b2fa655e8
Subnet Id: subnet-00a401e47d571238b
Key: vockey
AMI ID: ami-032509850cf9ee54e

WARNING: Found existing running EC2 instance with instance ID i-0389cad26a4f7a94d.
This script will not succeed if it already exists. 
Would you like to delete it? [Y/N]
>>
Y

Deleting the existing instance...
{
    "TerminatingInstances": [
        {
            "InstanceId": "i-0389cad26a4f7a94d", 
            "CurrentState": {
                "Code": 32, 
                "Name": "shutting-down"
            }, 
            "PreviousState": {
                "Code": 16, 
                "Name": "running"
            }
        }
    ]
}

WARNING: Found existing security group with name sg-0533255d7fd470df4.
This script will not succeed if it already exists. 
Would you like to delete it? [Y/N]
>>
Y

Deleting the existing security group...

Creating a new security group...
Security Group: sg-0123c33d06ed94196

Opening port 22 in the new security group
Opening port 80 in the new security group

Creating an EC2 instance in us-west-2

Instance Details....
{
    "Groups": [],
    "Instances": [
        {
            "AmiLaunchIndex": 0,
            "Architecture": "x86_64",
            "BlockDeviceMappings": [],
            "CapacityReservationSpecification": {
                "CapacityReservationPreference": "open"
            },
            "ClientToken": "18d83594-5b9e-49f7-9119-bbafaea23df0",
            "CpuOptions": {
                "CoreCount": 1,
                "ThreadsPerCore": 2
            },
            "EbsOptimized": false,
            "EnaSupport": true,
            "Hypervisor": "xen",
            "IamInstanceProfile": {
                "Arn": "arn:aws:iam::489629484699:instance-profile/LabInstanceProfile",
                "Id": "AIPAXEABRA2N42Z7QL5ZA"
            },
            "ImageId": "ami-032509850cf9ee54e",
            "InstanceId": "i-0d5969fff8f5b867f",
            "InstanceType": "t3.small",
            "KeyName": "vockey",
            "LaunchTime": "2022-05-11T10:01:40.000Z",
            "MetadataOptions": {
                "HttpEndpoint": "enabled",
                "HttpPutResponseHopLimit": 1,
                "HttpTokens": "optional",
                "State": "pending"
            },
            "Monitoring": {
                "State": "disabled"
            },
            "NetworkInterfaces": [
                {
                    "Attachment": {
                        "AttachTime": "2022-05-11T10:01:40.000Z",
                        "AttachmentId": "eni-attach-0beeec528da6bba23",
                        "DeleteOnTermination": true,
                        "DeviceIndex": 0,
                        "Status": "attaching"
                    },
                    "Description": "",
                    "Groups": [
                        {
                            "GroupId": "sg-0123c33d06ed94196",
                            "GroupName": "cafeSG"
                        }
                    ],
                    "InterfaceType": "interface",
                    "Ipv6Addresses": [],
                    "MacAddress": "02:1f:00:50:5d:5b",
                    "NetworkInterfaceId": "eni-003fa9941acd5b95d",
                    "OwnerId": "489629484699",
                    "PrivateIpAddress": "10.200.0.94",
                    "PrivateIpAddresses": [
                        {
                            "Primary": true,
                            "PrivateIpAddress": "10.200.0.94"
                        }
                    ],
                    "SourceDestCheck": true,
                    "Status": "in-use",
                    "SubnetId": "subnet-00a401e47d571238b",
                    "VpcId": "vpc-06ebde35b2fa655e8"
                }
            ],
            "Placement": {
                "AvailabilityZone": "us-west-2a",
                "GroupName": "",
                "Tenancy": "default"
            },
            "PrivateDnsName": "ip-10-200-0-94.us-west-2.compute.internal",
            "PrivateIpAddress": "10.200.0.94",
            "ProductCodes": [],
            "PublicDnsName": "",
            "RootDeviceName": "/dev/xvda",
            "RootDeviceType": "ebs",
            "SecurityGroups": [
                {
                    "GroupId": "sg-0123c33d06ed94196",
                    "GroupName": "cafeSG"
                }
            ],
            "SourceDestCheck": true,
            "State": {
                "Code": 0,
                "Name": "pending"
            },
            "StateReason": {
                "Code": "pending",
                "Message": "pending"
            },
            "StateTransitionReason": "",
            "SubnetId": "subnet-00a401e47d571238b",
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "cafeserver"
                }
            ],
            "VirtualizationType": "hvm",
            "VpcId": "vpc-06ebde35b2fa655e8"
        }
    ],
    "OwnerId": "489629484699",
    "ReservationId": "r-063df591e7e18946e"
}
instanceId=i-0d5969fff8f5b867f

Waiting for a public IP for the new instance...

The public IP of your LAMP instance is: 34.223.225.239

Download the Key Pair from the Vocareum page.

Then connect using this command (with .pem or .ppk added to the end of the keypair name):
ssh -i path-to/vockey ec2-user@34.223.225.239

The website should also become available at
http://34.223.225.239/cafe/


Done running create-instance.sh at 2022-05-11 10:01:52
##### End of output
